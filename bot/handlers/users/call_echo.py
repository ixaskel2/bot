import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types.input_media import InputMedia, InputFile
from keyboards.inline.main_inline import*
from keyboards.default.main_reply import*
from keyboards.inline.main_admin import*
from datetime import datetime
from bot_text import*
from states.state import*
from handlers.users.qiwi_pay import*
from converter_time import*
from crypto_tracker import*
import random
from loader import dp, bot


@dp.callback_query_handler(text="accept_rules")
async def bot_send_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_caption("üá≤üáΩ <code>Mexican Cartel</code>")
    await call.message.answer("‚ö°Ô∏è", reply_markup=main_menu())

@dp.callback_query_handler(text="add_balance")
async def bot_send_payment_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_caption("üí∏ <b>–í—ã–±–∏—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>", reply_markup=payment_menu())

@dp.callback_query_handler(text="back_to_profile")
async def bot_back_to_profile(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_caption(profile_text(call.message.chat.id, call.from_user.full_name), reply_markup=profile_but(call.message.chat.id))

@dp.callback_query_handler(text="my_buys")
async def bot_send_my_buys(call: types.CallbackQuery):
    await call.answer("‚òπÔ∏è –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫")


@dp.callback_query_handler(text="close_spam")
async def bot_close_spam(call: types.CallbackQuery):
    try:
        await call.answer()
        await call.message.delete()
    except:
        await call.answer("üí¢")


@dp.callback_query_handler(text="hide_adm")
async def bot_hide_admin(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("üßõ‚Äç‚ôÄÔ∏è <code>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞...</code>")

@dp.callback_query_handler(text="check_pay")
async def bot_check_pay(call: types.CallbackQuery):
    await call.answer("üí¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await bot.send_message(chat_id=LOGS_CHAT, text=f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.from_user.full_name}</a>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º!\n'
                                            f'‚îî@{call.from_user.username}\n')
    await asyncio.sleep(1)


@dp.callback_query_handler(text="back_to_admin")
async def bot_hide_admin(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(f"üë®‚Äç‚öñÔ∏è <b>–ê–¥–º–∏–Ω:</b> <code>{call.from_user.full_name}</code>", reply_markup=admin_but())


@dp.callback_query_handler(text="set_p2p")
async def bot_set_p2p(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    msg = await call.message.edit_text("üîë <b>–í–≤–µ–¥–∏—Ç–µ p2p –∫–ª—é—á</b>", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
    await ADMIN_INFO.p2p.set()

@dp.callback_query_handler(text="set_btc")
async def bot_set_p2p(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    msg = await call.message.edit_text("üîë <b>–í–≤–µ–¥–∏—Ç–µ btc –∞–¥—Ä–µ—Å</b>", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
    await ADMIN_INFO.btc.set()

@dp.callback_query_handler(text="set_usdt")
async def bot_set_p2p(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    msg = await call.message.edit_text("üîë <b>–í–≤–µ–¥–∏—Ç–µ usdt –∞–¥—Ä–µ—Å</b>", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
    await ADMIN_INFO.usdt.set()

@dp.callback_query_handler(text="stata")
async def statistik_info(call: types.CallbackQuery):
    try:
        await call.message.edit_text(f"ü§µ‚Äç‚ôÇÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ {count_users()} —á–µ–ª.", reply_markup=admin_but())
    except:
        await bot.answer_callback_query(call.id, "Users infoüëá")

@dp.callback_query_handler(text="settings")
async def statistik_info(call: types.CallbackQuery):
    try:
        await call.message.edit_text(f"üîë <b>P2P –∫–ª—é—á:</b> <code>{admins_setting_info()[0]}</code>\n\n"
        f"‚öí <b>BTC adress:</b> <code>{admins_setting_info()[1]}</code>\n\n"
        f"üõ† <b>USDT adress:</b> <code>{admins_setting_info()[2]}</code>", reply_markup=admin_but())
    except Exception as err:
        logging.exception(err)
        await bot.answer_callback_query(call.id, "Settingsüëá")



@dp.callback_query_handler(text="spam")
async def choose_types_spam(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏. –ö–∞–∫ –±—É–¥–µ–º –æ—Ç—Å—ã–ª–∞—Ç—å?", reply_markup=spam_types())

@dp.callback_query_handler(text="spam_text")
async def send_text_for_spam(call: types.CallbackQuery, state=FSMContext):
    await call.message.delete()
    await call.answer()
    msg = await call.message.answer("üåê –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        data['check_spam_type'] = "txt"
    await SPAM_DATA.text.set()

@dp.callback_query_handler(text="spam_pic")
async def send_pic_for_spam(call: types.CallbackQuery, state=FSMContext):
    await call.message.delete()
    await call.answer()
    msg = await call.message.answer("üéÜ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        data['check_spam_type'] = "photo"
    await SPAM_DATA.photo.set()

@dp.callback_query_handler(text="spam_video")
async def send_video_for_spam(call: types.CallbackQuery, state=FSMContext):
    await call.message.delete()
    await call.answer()
    msg = await call.message.answer("üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        data['check_spam_type'] = "video"
    await SPAM_DATA.video.set()

@dp.callback_query_handler(text="spam_gif")
async def send_gif_for_spam(call: types.CallbackQuery, state=FSMContext):
    await call.message.delete()
    await call.answer()
    msg = await call.message.answer("üåÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–∏—Ñ–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=cancel_but())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        data['check_spam_type'] = "animation"
    await SPAM_DATA.animation.set()


@dp.callback_query_handler(text="basket")
async def basket_info(call: types.CallbackQuery):
    try:
        lenth = len(get_busket_info(call.message.chat.id))
        if lenth == 0:
            await call.answer("üí¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        else:
            await call.message.edit_caption(f"üóë <b>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b> <code>{lenth} —à—Ç.</code>", reply_markup=busket_but(get_busket_info(call.message.chat.id)))
    except:
        pass


@dp.callback_query_handler(text="cancel_payment", state="*")
async def bot_cancel_payment(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    photo = await bot.get_user_profile_photos(call.message.chat.id)
    cnt = photo.total_count
    if int(cnt) == 0:
        await call.message.edit_media(InputMedia(media=InputFile("photos/cartel.jpg"), caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but(call.message.chat.id))
    else:
        avatar = photo.photos[0][1]['file_id']
        await call.message.edit_media(InputMedia(media=avatar, caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but(call.message.chat.id))

    await state.finish()    


@dp.callback_query_handler(text="add_qiwi")
async def payment_qiwi(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    msg = await call.message.edit_media(InputMedia(media=InputFile("photos/card_qiwi.png"), caption="üí† <b>–ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
                                                                                                    "üí≥  <b>–ö–∞—Ä—Ç–∞ - –ü–µ—Ä–µ–≤–æ–¥</b>\n"
                                                                                                    "‚ôªÔ∏è <code>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</code>"), reply_markup=cancel_payment())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        await BALANCE.summa.set()


@dp.callback_query_handler(text="add_banker")
async def payment_banker(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    msg = await call.message.edit_media(InputMedia(media=InputFile("photos/banker.jpg"), caption="üí¨ –°–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ –≤ —Ä—É–±–ª—è—Ö –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å—á–µ—Ç. –ß–µ–∫ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ @BTC_CHANGE_BOT –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–ö–æ—à–µ–ª—ë–∫ - BTC —á–µ–∫</b>"), reply_markup=cancel_payment())
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
        await BALANCE.btc_ticket.set()

@dp.callback_query_handler(text="add_btc")
async def payment_btc(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    await call.message.edit_media(InputMedia(media=InputFile("photos/btc.jpg"), caption="üí† <b>–ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>BTC</code>\n\n"
                                                                                        f"üõ† <b>BTC –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{admins_setting_info()[1]}</code>\n\n"
                                                                                        "üÜé <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>"), reply_markup=cancel_payment())
    

@dp.callback_query_handler(text="add_usdt")
async def payment_btc(call: types.CallbackQuery, state=FSMContext):
    await call.answer()
    await call.message.edit_media(InputMedia(media=InputFile("photos/usdt.jpg"), caption="üí† <b>–ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>USDT</code>\n\n"
                                                                                        f"üõ† <b>USDT –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (ERC20):</b> <code>{admins_setting_info()[2]}</code>\n\n"
                                                                                        "üÜé <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>"), reply_markup=cancel_payment())
    




@dp.callback_query_handler(state="*")
async def call_answer(call: types.CallbackQuery, state=FSMContext):
    action = call.data.split("+")

    if call.data == "cansel_spam":
        await call.answer()
        await call.message.edit_text("üí¢ <code>–î–µ–π—Å–≤—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ...</code>", reply_markup=admin_but())
        await state.finish()


    if action[0] == "reject_payment":
        reject_payment_form(action[1])
        await state.finish()  
        await call.answer("üí¢")
        photo = await bot.get_user_profile_photos(call.message.chat.id)
        cnt = photo.total_count
        if int(cnt) == 0:
            await call.message.edit_media(InputMedia(media=InputFile("photos/cartel.jpg"), caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but())
        else:
            avatar = photo.photos[0][1]['file_id']
            await call.message.edit_media(InputMedia(media=avatar, caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but(call.message.chat.id))
          
    elif action[0] == "payed":
        if check_payment(action[1]) == "PAID":
            await call.answer("‚ö°Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞")
            add_balance(call.message.chat.id, action[2])
            photo = await bot.get_user_profile_photos(call.message.chat.id)
            cnt = photo.total_count
            if int(cnt) == 0:
                await call.message.edit_media(InputMedia(media=InputFile("photos/cartel.jpg"), caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but(call.message.chat.id))
            else:
                avatar = photo.photos[0][1]['file_id']
                await call.message.edit_media(InputMedia(media=avatar, caption=profile_text(call.message.chat.id, call.from_user.full_name)), reply_markup=profile_but(call.message.chat.id))

        else:
            await bot.answer_callback_query(call.id, "‚ö°Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    elif action[0] == "staff":
        
        info = staff_info(action[1])
        if info is None:
            await call.answer("üí¢ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await call.answer()
            now = datetime.now().strftime('%Y-%m-%d %H:%M')
            t1 = info[7]
            t2 = str(now)
            date_format = "%Y-%m-%d %H:%M"
            t1_object = to_datetime_object(t1, date_format)
            t2_object = to_datetime_object(t2, date_format)
            check_time = t1_object - t2_object
            check_time = str(check_time)
            time_to_pay = check_time.split(":")[1]
            link_info = create_payment_link(info[2])
            await call.message.edit_media(InputMedia(media=InputFile("photos/cartel.jpg"), caption=f"üî• <code>–¢–æ–≤–∞—Ä #{info[1]}</code>\n\n"
                                                                                                    f"üåÉ <b>–†–∞–π–æ–Ω:</b> <code>{info[6][2:]}</code>\n"
                                                                                                    f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> <code>{info[4][2:]}</code>\n"
                                                                                                    f"‚õè <b>–¢–∏–ø –∫–ª–∞–¥–∞:</b> <code>{info[5]}</code>\n"
                                                                                                    f"üìÑ <b>–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞:</b> <code>–§–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º + –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è</code>\n"
                                                                                                    f"üè¶ <b>–¶–µ–Ω–∞:</b> <code>{info[2]} —Ä—É–±. | {info[3]} btc</code>\n\n"
                                                                                                    f"‚åõÔ∏è <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> <code>{time_to_pay} –º–∏–Ω.</code>"), reply_markup=pay_menu(info[1],link_info[0], link_info[1]))
                
    elif action[0] == "cancel_pay":
        await call.answer()
        try:
            delete_basket(action[2])
            reject_payment_form(action[1])
        except:
            pass
        await call.message.edit_caption("üí¢ <code>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞...</code>")
    
    elif action[0] == "hide_buy":
        await call.answer()
        try:
            reject_payment_form(action[1])
        except:
            pass
        await call.message.edit_caption("üßõ‚Äç‚ôÄÔ∏è <code>–û–∫–Ω–æ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ —Å–∫—Ä—ã—Ç–æ...</code>\n\n"
        "üóë <b>–í–∞—à —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ</b>")
    

    elif action[0] == "from_btc":
        try:
            info = staff_info(action[1])
            if info is None:
                await call.answer("üí¢ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–æ—à–ª–æ")
            else:
                await call.answer()
                reject_payment_form(action[2])
                btc = admins_setting_info()[1]
                await call.message.edit_caption(f"üõ† <b>–ê–¥—Ä–µ—Å btc:</b> <code>{btc}</code>\n"
                f"üè¶ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{info[3]} btc</code>\n\n"
                "üÜé <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>", reply_markup=cancel_payment())
        except:
            pass

    elif action[0] == "from_usdt":
        try:
            info = staff_info(action[1])
            if info is None:
                await call.answer("üí¢ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–æ—à–ª–æ")
            else:
                await call.answer()
                reject_payment_form(action[2])
                usdt = admins_setting_info()[2]
                summa_usdt = round((int(info[2]) / curs_usd()),2)
                await call.message.edit_caption(f"üõ† <b>–ê–¥—Ä–µ—Å usdt:</b> <code>{usdt}</code>\n"
                f"üè¶ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{summa_usdt} usdt</code>\n\n"
                "üÜé <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>", reply_markup=cancel_payment())
        except:
            pass

    elif action[0] == "from_balance":
        try:
            info = staff_info(action[1])
            if info is None:
                await call.answer("üí¢ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–æ—à–ª–æ")
            else:
                balance = get_user_info(call.message.chat.id)[1]
                if int(info[2]) > int(balance):
                    await call.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
                else:
                    await call.answer()
                    minus_balance(call.message.chat.id, info[2])
                    await call.message.edit_caption("‚úÖ <code>–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞</code>\n\n"
                    "‚åõÔ∏è <code>–û–∂–∏–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã...</code>")
        except:
            pass
    
    elif action[0] == "from_req":
        try:
            info = staff_info(action[1])
            if info is None:
                await call.answer("üí¢ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–æ—à–ª–æ")
            else:
                await call.answer()
                reject_payment_form(action[2])
                await call.message.edit_caption("üßæ <b>–û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∞—Ç–∞–º</b>\n"
                f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> <code>{info[4][2:]}</code>\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
              #  f"ü•ù <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã QIWI:</b> <code>(–ù–æ–º–µ—Ä—Ç–µ–ª–µ—Ñ–æ–Ω–∞)</code>\n"
              # f"üîñ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É:</b> <code>{random.randint(9999999,1000000000)}</code>\n"
              #  f"üè¶ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{info[2]} —Ä—É–±.</code>\n"
              #  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã:</b> <code>2204 1202 0005 3078</code>\n"
                f"üí≥ <b>–í—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É, –∏–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–µ –±—É–¥–µ—Ç!</b>\n"
                f"üè¶ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{info[2]} —Ä—É–±.</code>\n", reply_markup=check_payment_but())
        except Exception as err:
            logging.exception(err)
    
    elif action[0] == "auto":
        await call.answer("üí•")
        await bot.send_message(chat_id=action[1], text="‚ôªÔ∏è <code>–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</code>")
    




