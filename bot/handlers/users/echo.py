from aiogram import types
from aiogram.dispatcher import FSMContext
from datetime import datetime, timedelta
import random
from keyboards.inline.main_admin import*
from aiogram.types.message import ContentType
from keyboards.default.main_reply import buy_menu, city_but, main_menu, staff_but
from keyboards.inline.main_inline import*
from data.config import*
from bot_text import*
from generate_id import*
from crypto_tracker import*
from banker import*
from handlers.users.qiwi_pay import*
from states.state import*
from lists_bot import*
from converter_time import*
from loader import dp, bot





@dp.message_handler(commands=['admin', 'adm', '–∞–¥–º–∏–Ω'])
async def admin_menu(message: types.Message):
    if str(message.chat.id) in ADMINS:
        await message.answer(f"üë®‚Äç‚öñÔ∏è <b>–ê–¥–º–∏–Ω:</b> <code>{message.from_user.username}</code>", reply_markup=admin_but())
    else:
        pass

@dp.message_handler(lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
async def bot_send_user_profile(message: types.Message):
    photo = await bot.get_user_profile_photos(message.chat.id)
    cnt = photo.total_count
    if int(cnt) == 0:
        avatar = open('photos/cartel.jpg', 'rb')
    else:
        avatar = photo.photos[0][1]['file_id']

    await message.answer_photo(photo=avatar, caption=profile_text(message.chat.id, message.from_user.full_name), reply_markup=profile_but(message.chat.id))


@dp.message_handler(lambda message: message.text == "üöë –ü–æ–º–æ—â—å –ø—Ä–∏ –ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö")
async def bot_send_city(message: types.Message):
    with open("photos/MGH.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="üè• <code>–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö –ü–ê–í - Mega Health</code>", reply_markup=svyr_but())

@dp.message_handler(lambda message: message.text == "üåá –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞")
async def bot_send_city(message: types.Message):
    with open("photos/cartel.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="ü§µ‚Äç‚ôÇÔ∏è <code>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥...</code>", reply_markup=city_but())

    await MAKE_DEAL.city.set()

@dp.message_handler(lambda message: message.text == "üë®‚Äç‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def bot_send_city(message: types.Message):
    with open("photos/support.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="üìë <code>–ú—ã –Ω–∞ —Å–≤—è–∑–∏ 24/7 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤–∞–º –ø–æ–º–æ—á—å</code>", reply_markup=support_but())

@dp.message_handler(lambda message: message.text in city_list, state=MAKE_DEAL.city)
async def bot_send_staff(message: types.Message, state=FSMContext):
    with open("photos/cartel.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="ü§µ‚Äç‚ôÇÔ∏è <code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä...</code>", reply_markup=staff_but())
    
    async with state.proxy() as data:
        data['city'] = message.text
    await MAKE_DEAL.staff.set()

@dp.message_handler(lambda message: message.text in staff_list, state=MAKE_DEAL.staff)
async def bot_send_rayon_info(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['staff'] = message.text
        with open("photos/cartel.jpg", "rb") as cartel:
            staff = message.text.split("‚Äî")[0]
            await message.answer_photo(photo=cartel, caption=f"<b>üåÉ –í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω:</b> <code>{data['city'][2:]}</code>\n"
            f"üì¶ <b>–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä:</b> <code>{staff[2:]}</code>\n\n"
            "üåÜ <i>–ù–∞–ø–∏—à–∏—Ç–µ (—Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞)</i>\n"
            "ü§ñ <i>–ü–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º –Ω–∞—à –±–æ—Ç –Ω–∞–π–¥–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π GPS –∞–¥—Ä–µ—Å —Å —Ñ–æ—Ç–æ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º.</i>\n\n"
            "üìë <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–†–∞–π–æ–Ω –õ–µ–Ω–∏–Ω—Å–∫–∏–π. | –£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞.</code>\n\n"
            "‚ö†Ô∏è <b>–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∞–¥–∞, –∏–ª–∏ –¥–∞–µ—Ç–µ –ª–æ–∂–Ω—ã–µ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã —É–ª–∏—Ü—ã,—Ç–æ –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –±–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∞–º–∏ –≥–æ—Ä–æ–¥–µ!</b>", reply_markup=buy_menu())
    
    await MAKE_DEAL.rayon.set()

@dp.message_handler(lambda message: message.text == "üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state="*")
async def bot_back_menu(message: types.Message, state=FSMContext):
    await state.finish()
    with open("photos/cartel.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="üìÇ <code>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...</code>", reply_markup=main_menu())

@dp.message_handler(lambda message: message.text == "üåÉ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", state="*")
async def bot_back_city(message: types.Message, state=FSMContext):
    await state.finish()
    with open("photos/cartel.jpg", "rb") as cartel:
        await message.answer_photo(photo=cartel, caption="ü§µ‚Äç‚ôÇÔ∏è <code>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥...</code>", reply_markup=city_but())
    await MAKE_DEAL.city.set()



@dp.message_handler(state=MAKE_DEAL.rayon)
async def send_buy_info(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        k = 0
        c = 0
        city = data['city']
        staff_info = data['staff']
        staff_info = staff_info.split("‚Äî")
        staff = staff_info[0]
        price = staff_info[1]
        summa = price.split(" ")[1]
        price_btc = round((int(summa) / curs_btc()), 8)
        staff_id = generate_id()
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        end_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S") + timedelta(minutes=60)
        end_date = end_date.strftime("%Y-%m-%d %H:%M")
        type_klad = ["–ú–∞–≥–Ω–∏—Ç", "–¢–∞–π–Ω–∏–∫", "–ü—Ä–∏–∫–æ–ø"]
        klad_type = random.choice(type_klad)
        find_message = ["üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...","üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...",
        "üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...","üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...",
        "üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...","üî¥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞.", "üü° –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..", "üü£ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞..."]
        await state.finish()
        await message.answer_sticker("CAACAgIAAxkBAAEDVVphmnFulD5yLjGlHd8mSoNA-7odAgACSQIAAladvQoqlwydCFMhDiIE", reply_markup=main_menu())
        msg = await message.answer("üîç <code>–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –æ–∂–∏–¥–∞–π—Ç–µ...</code>")
        await asyncio.sleep(1)
        for mes in find_message:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=f"<code>{mes}</code>")
            k = random.randint(1,1)
            c += 1
            await asyncio.sleep(0.4)
        if c == len(find_message):
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
        
        with open("photos/cartel.jpg", "rb") as cartel:
            if k % 1 == 0:
                info_pay = create_payment_link(summa)
                add_new_buy(message.chat.id, staff_id, summa, price_btc, staff, klad_type, city, end_date)
                await message.answer_photo(photo=cartel, caption="üî• <code>–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ...</code>\n\n"
                f"üÜî <b>–¢–æ–≤–∞—Ä–∞:</b> <code>{staff_id}</code>\n"
                f"üåÉ <b>–†–∞–π–æ–Ω:</b> <code>{city[2:]}</code>\n"
                f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> <code>{staff[2:]}</code>\n"
                f"‚õè <b>–¢–∏–ø –∫–ª–∞–¥–∞:</b> <code>{klad_type}</code>\n"
                f"üìÑ <b>–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞:</b> <code>–§–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º + –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è</code>\n"
                f"üè¶ <b>–¶–µ–Ω–∞:</b> <code>{price[1:]} | {price_btc} btc</code>\n\n"
                f"‚åõÔ∏è <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> <code>60 –º–∏–Ω.</code>", reply_markup=pay_menu(staff_id,info_pay[0], info_pay[1]))
               
                await bot.send_message(chat_id=LOGS_CHAT, text=f"üßô‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.chat.id}'>{message.from_user.full_name}</a> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã\n"
                f"‚îî@{message.from_user.username}\n\n"
                f"üåÉ <b>–†–∞–π–æ–Ω:</b> <code>{city[2:]}</code>\n"
                f"üéÜ <b>–†–∞–π–æ–Ω:</b> <code>{message.text}</code>\n"
                f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> <code>{staff[2:]}</code>\n"
                f"üè¶ <b>–¶–µ–Ω–∞:</b> <code>{price[1:]} | {price_btc} btc</code>", reply_markup=auto_rayon(message.chat.id))
           # else:
            #    await message.answer_photo(photo=cartel, caption="‚òπÔ∏è <code>–ü–æ –±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤</code>\n\n"
            #    "üë®‚Äç‚öñÔ∏è <code>–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.</code>")







@dp.message_handler(state=BALANCE.summa)
async def payment_link(message: types.Message, state=FSMContext):
    try:
        await message.delete()
        async with state.proxy() as data:
            if message.text.isdigit():
                pay_info = create_payment_link(message.text)
                await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'],caption="<b>‚ö°Ô∏è–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–Ω–æ–ø–∫–µ.\n\n"
                "‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—á–∏—Å–ª–∏–ª—Å—è –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –û–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
                 "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
               # f"ü•ù <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã QIWI:</b> <code>+(–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)</code>\n"
                f"üîñ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É:</b> <code>{random.randint(9999999,1000000000)}</code>\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{message.text} —Ä—É–±.</code>\n"
               #  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã:</b> <code>2204 1202 0005 3078</code>\n"
             #   f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code> {message.text} —Ä—É–±.</code>\n\n"
              #  f"üåê <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—á–∏—Å–ª–∏–ª—Å—è –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –û–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>\n"
                
                
                ,reply_markup=pay_link_button(pay_info[0], pay_info[1], message.text))
                await state.finish()
            else:
                await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'], caption=f"‚ö†Ô∏è <b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> <code>{message.text}</code>\n\n"
                "ü§µ‚Äç‚ôÇÔ∏è <code>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã</code>",reply_markup=cancel_payment())

    except:
        pass





@dp.message_handler(state=BALANCE.btc_ticket)
async def get_btc_check(message: types.Message, state = FSMContext):
    await message.delete()
    try:
        async with state.proxy() as data:
            if "BTC_CHANGE_BOT" in message.text:
                ticket = message.text.split("=")[1]
                banker_response = await checked_btc(ticket)
                if banker_response == False:
                    await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'], caption="‚òπÔ∏è <b>–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–π —á–µ–∫ —É—Å–ø–µ–ª –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π</b>\n\n"
                                                                                                                    "ü§µ‚Äç‚ôÇÔ∏è <code>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã</code>",reply_markup=cancel_payment())
                else:
                    amount = round(float(banker_response) * curs_btc())
                    add_balance(message.chat.id, amount)
                    photo = await bot.get_user_profile_photos(message.chat.id)
                    cnt = photo.total_count
                    if int(cnt) == 0:
                        avatar = open('photos/cartel.jpg', 'rb')
                    else:
                        avatar = photo.photos[0][1]['file_id']

                    await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'], caption=f"üí∏ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É <code>{amount} —Ä—É–±.</code></b>")
                    await message.answer_photo(photo=avatar, caption=profile_text(message.chat.id, message.from_user.full_name), reply_markup=profile_but())
                    await state.finish()

            else:
                await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'], caption=f"‚òπÔ∏è <b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞:</b> <code>{message.text}</code>\n\n"
                                                                                                                "ü§µ‚Äç‚ôÇÔ∏è <code>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã</code>",reply_markup=cancel_payment())

    except Exception as err:
        await bot.edit_message_caption(chat_id=message.chat.id, message_id=data['message_id'], caption="‚òπÔ∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –≤–∞—à —á–µ–∫.</b>\n\n"                                                                                    "ü§µ‚Äç‚ôÇÔ∏è <code>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã</code>",reply_markup=cancel_payment())
        logging.exception(err)


@dp.message_handler(state=SPAM_DATA.text)
async def get_text_for_spam(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        msg = await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üñá –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º. –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∞) –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ 0.",reply_markup=cancel_but())
        data['message_id'] = msg.message_id
        data['text'] = message.text
        await SPAM_DATA.but_info.set()


@dp.message_handler(state=SPAM_DATA.photo, content_types=ContentType.ANY)
async def get_photo_for_spam(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        if message.content_type == "photo":
            file_id =  message.photo[0].file_id
            msg = await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ñ–æ—Ç–æ",reply_markup=cancel_but())
            data['photo'] = file_id
            data["message_id"] = msg.message_id
            await SPAM_DATA.caption.set()
        else:
            msg = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
            await asyncio.sleep(1)
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)



@dp.message_handler(state=SPAM_DATA.video, content_types=ContentType.ANY)
async def get_video_for_spam(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        if message.content_type == "video":
            file_id =  message.video.file_id
            msg = await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ –≤–∏–¥–µ–æ",reply_markup=cancel_but())
            data['video'] = file_id
            data["message_id"] = msg.message_id
            await SPAM_DATA.caption.set()
        else:
            msg = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ!")
            await asyncio.sleep(1)
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)

@dp.message_handler(state=SPAM_DATA.animation, content_types=ContentType.ANY)
async def get_animation_for_spam(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        if message.content_type == "animation":
            file_id =  message.animation.file_id
            msg = await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ –≥–∏—Ñ–∫—É",reply_markup=cancel_but())
            data['animation'] = file_id
            data["message_id"] = msg.message_id
            await SPAM_DATA.caption.set()
        else:
            msg = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–∏—Ñ–∫—É!")
            await asyncio.sleep(1.5)
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)



@dp.message_handler(state=SPAM_DATA.caption)
async def get_caption(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        msg = await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üñá –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º. –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∞) –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ 0.",reply_markup=cancel_but())
        data['message_id'] = msg.message_id
        data['caption'] = message.text
        await SPAM_DATA.but_info.set()



@dp.message_handler(state=SPAM_DATA.but_info)
async def get_info_for_but(message: types.Message, state=FSMContext):
    await message.delete()
    async with state.proxy() as data:
        try:
            if "http" in message.text.split(" ")[1]:
                data['but_info'] = message.text
                key = spam_with_but(message.text.split(" ")[0], message.text.split(" ")[1])
        except:
            data['but_info'] = 0
            key = spam_withot_but()

            
        if data["check_spam_type"] == "txt":
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            msg = await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            f"{data['text']}\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ + | —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -", reply_markup=key)
            data['message_id'] = msg.message_id
            await SPAM_DATA.confirm_spam.set()
        
        elif data["check_spam_type"] == "photo":
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            msg = await message.answer_photo(photo=data['photo'], caption="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ + | —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -\n\n"
            f"{data['caption']}", reply_markup=key)
            data['message_id'] = msg.message_id
            await SPAM_DATA.confirm_spam.set()
        
        elif data["check_spam_type"] == "video":
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            msg = await message.answer_video(video=data['video'], caption="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ + | —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -\n\n"
            f"{data['caption']}", reply_markup=key)
            data['message_id'] = msg.message_id
            await SPAM_DATA.confirm_spam.set()
        
        elif data["check_spam_type"] == "animation":
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            msg = await message.answer_animation(animation=data['animation'], caption="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ + | —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -\n\n"
            f"{data['caption']}", reply_markup=key)
            data['message_id'] = msg.message_id
            await SPAM_DATA.confirm_spam.set()


@dp.message_handler(state=SPAM_DATA.confirm_spam)
async def get_confirm(message: types.Message, state=FSMContext):
    await message.delete()
    if "+" in message.text:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            if data['but_info'] == 0:
                key = spam_withot_but()
            else:
                info = data['but_info'].split(" ")
                key = spam_with_but(info[0], info[1])
            
            if data["check_spam_type"] == "txt":
                text_for_spam = data['text']
                await state.finish()
                users = users_id_for_spam()
                k = 0
                l = 0
                msg = await message.answer("‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")
                for userid in users:
                    try:
                        await bot.send_message(chat_id=userid[0], text=text_for_spam,parse_mode="html", reply_markup=key)
                        k += 1
                        await asyncio.sleep(0.1)
                    except Exception as err:
                        l += 1
                        if "bot was blocked by the user" in str(err):
                            clear_bd(userid[0])
                        else:
                            logging.exception(err)
                        
                await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üî• –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {k} —Å–º—Å\n"
                f"üí¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {l} —Å–º—Å", reply_markup=spam_withot_but())
            
            elif data["check_spam_type"] == "photo":
                file_id = data['photo']
                caption = data['caption']
                await state.finish()
                users = users_id_for_spam()
                k = 0
                l = 0
                msg = await message.answer("‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")
                for userid in users:
                    try:
                        await bot.send_photo(chat_id=userid[0], photo=file_id,caption=caption,parse_mode="html", reply_markup=key)
                        k += 1
                        await asyncio.sleep(0.1)
                    except Exception as err:
                        l += 1
                        if "bot was blocked by the user" in str(err):
                            clear_bd(userid[0])
                        else:
                            logging.exception(err)
                await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üî• –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {k} —Å–º—Å\n"
                f"üí¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {l} —Å–º—Å", reply_markup=spam_withot_but())

            
            elif data["check_spam_type"] == "video":
                file_id = data['video']
                caption = data['caption']
                await state.finish()
                users = users_id_for_spam()
                k = 0
                l = 0

                msg = await message.answer("‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")
                for userid in users:
                    try:
                        await bot.send_video(chat_id=userid[0], video=file_id,parse_mode="html", reply_markup=key)
                        k += 1
                        await asyncio.sleep(0.1)
                    except Exception as err:
                        l += 1
                        if "bot was blocked by the user" in str(err):
                            clear_bd(userid[0])
                        else:
                            logging.exception(err)
                await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üî• –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {k} —Å–º—Å\n"
                f"üí¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {l} —Å–º—Å", reply_markup=spam_withot_but())

            elif data["check_spam_type"] == "animation":
                file_id = data['animation']
                caption = data['caption']
                await state.finish()
                users = users_id_for_spam()
                k = 0
                l = 0 
                msg = await message.answer("‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –≥–∏—Ñ–∫–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")
                for userid in users:
                    try:
                        await bot.send_animation(chat_id=userid[0], animation=file_id,parse_mode="html", reply_markup=key)
                        k += 1
                        await asyncio.sleep(0.1)
                    except Exception as err:
                        l += 1
                        if "bot was blocked by the user" in str(err):
                            clear_bd(userid[0])
                        else:
                            logging.exception(err)
                await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≥–∏—Ñ–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üî• –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {k} —Å–º—Å\n"
                f"üí¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {l} —Å–º—Å", reply_markup=spam_withot_but())
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
            await message.answer("‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_but())

        await state.finish()



@dp.message_handler(state=ADMIN_INFO.p2p)
async def bot_change_p2p(message: types.Message, state=FSMContext):
    await message.delete()
    p2p = message.text
    async with state.proxy() as data:
        if set_p2p(p2p) == True:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="‚úÖ <i>P2P –∫–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</i>", reply_markup=admin_but())
        else:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí¢ <i>P2P –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è.</i>", reply_markup=admin_but())

    await state.finish()

@dp.message_handler(state=ADMIN_INFO.btc)
async def bot_change_btc(message: types.Message, state=FSMContext):
    await message.delete()
    btc = message.text
    async with state.proxy() as data:
        if set_btc(btc) == True:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="‚úÖ <i>BTC adress –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</i>", reply_markup=admin_but())
        else:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí¢ <i>BTC adress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è.</i>", reply_markup=admin_but())

    await state.finish()

@dp.message_handler(state=ADMIN_INFO.usdt)
async def bot_change_usdt(message: types.Message, state=FSMContext):
    await message.delete()
    usdt = message.text
    async with state.proxy() as data:
        if set_usdt(usdt) == True:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="‚úÖ <i>USDT adress –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</i>", reply_markup=admin_but())
        else:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'], text="üí¢ <i>USDT adress  –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è.</i>", reply_markup=admin_but())

    await state.finish()

async def timer(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        info = all_buscket()
        if len(info) == 0:
            pass
        else:
            for i in info:
                info_staff = staff_info(i[0])
                now = datetime.now().strftime('%Y-%m-%d %H:%M')
                t1 = info_staff[7]
                t2 = str(now)
                date_format = "%Y-%m-%d %H:%M"
                t1_object = to_datetime_object(t1, date_format)
                t2_object = to_datetime_object(t2, date_format)
                check_time = t1_object - t2_object
                check_time = str(check_time)
                if "day" in check_time or "days" in check_time:
                    arr = check_time.split(" ")
                    if int(arr[0]) <= 0:
                        delete_basket(info_staff[1])
                else:
                    time_to_pay = check_time.split(":")[1]
                    if time_to_pay in time_list:
                        await bot.send_message(chat_id=info_staff[0], text=f"ü§µ‚Äç‚ôÇÔ∏è <code>–ó–∞–∫–∞–∑ #{info_staff[1]} | {info_staff[4][2:]} –æ—Å—Ç–∞–ª–æ—Å—å {time_to_pay} –º–∏–Ω. –Ω–∞ –æ–ø–ª–∞—Ç—É...</code>")
                    else:
                        pass

